name: Test Production Environments E2E
on:
  push:
    branches:
      - main
    paths:
      - "apps/**"
      - "packages/**"
      - "testing/**"
      - ".github/**"
jobs:
  backup_firestore:
    name: Backup Firestore Database
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_PRODUCTION_LOGS }}
    steps:
      - uses: actions/checkout@master
      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
      - name: Backup Firestore
        id: backup-firestore
        run: gcloud firestore export gs://movet-care-backups
      - uses: act10ns/slack@master
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          config: .github/config/slack.yml
          channel: "#production-logs"
        if: always()
  deploy_functions:
    name: Deploy API via Firebase Cloud Functions
    needs: backup_firestore
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_PRODUCTION_LOGS }}
    steps:
      - name: Checkout Repo
        id: repo-checkout
        uses: actions/checkout@master
      - uses: pnpm/action-setup@master
        with:
          version: latest
      - uses: actions/setup-node@master
        with:
          node-version: latest
          cache: 'pnpm'
      - name: Install Global Dependencies
        id: install-global-dependencies
        run: pnpm add -g firebase-tools
      - name: Install Dependencies
        id: install-dependencies
        run: pnpm install
      - name: Lint Cloud Functions
        id: lint
        run: pnpm -F api.movetcare.com run lint
      - name: Build Cloud Functions
        id: build
        run: pnpm -F api.movetcare.com run build
      - name: Deploy to Firebase
        id: deploy-cloud-functions
        run: firebase use movet-care --token "${{ secrets.FIREBASE_TOKEN_PRODUCTION}}" && firebase deploy --only functions --non-interactive -f --token "${{ secrets.FIREBASE_TOKEN_PRODUCTION}}"
      - uses: act10ns/slack@master
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          config: .github/config/slack.yml
          channel: "#production-logs"
        if: always()
  cypress_run:
    name: Run E2E Cypress Tests
    needs: deploy_functions
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_PRODUCTION_LOGS }}
    container: cypress/browsers:node12.18.3-chrome87-ff82
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2, 3, 4, 5]
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - uses: pnpm/action-setup@master
        with:
          version: latest
      - uses: actions/setup-node@master
        with:
          node-version: latest
          cache: 'pnpm'
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          record: true
          parallel: true
          browser: chrome
          group: 'Chrome'
        env:
          CYPRESS_ENVIRONMENT: "production"
          CYPRESS_TEST_API_URL: "https://us-central1-movet-care.cloudfunctions.net/resetTestData"
          CYPRESS_APP_URL: "https://app.movetcare.com"
          CYPRESS_WEBSITE_URL: "https://movetcare.com"
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CYPRESS_PROJECT_ID: ${{ secrets.PROJECT_ID }}
          CYPRESS_FAIL_FAST_PLUGIN: false
  wipe_test_data:
      name: Wipe Test Data
      needs: cypress_run
      runs-on: ubuntu-latest
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_PRODUCTION_LOGS }}
      steps:
        - name: Checkout
          uses: actions/checkout@master
        - name: Wipe Test Data from Database
          id: wipe-test-data
          run: npm run wipe:test:prod
        - uses: act10ns/slack@master
          with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            config: .github/config/slack.yml
            channel: "#production-logs"
          if: always()
